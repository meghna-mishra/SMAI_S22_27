# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZaQEqcYGPEAhWQkFChIuWwQBYtgGEge1
"""

from keras.models import Sequential
from keras.models import load_model,save_model
from keras.layers import Conv2D, Dense, Dropout, Embedding, MaxPooling2D, AveragePooling2D, BatchNormalization, ReLU, ZeroPadding2D
import tensorflow.keras.optimizers as optim
from keras.callbacks import EarlyStopping
from keras.activations import relu, tanh
import tensorflow as tf
import torch

LR = 1e-4

def createCNN():
  model = Sequential()
  model.add(ZeroPadding2D(padding=(4, 4)))
  model.add(Conv2D(128, input_dim = 1, kernel_size = 7, strides = 3, padding = 'same', activation = 'relu'))
  model.add(ZeroPadding2D(padding=(1, 1)))
  model.add(Conv2D(256, input_dim = 128, kernel_size = 5, strides = 1, padding = 'same', activation = 'relu'))
  model.add(ZeroPadding2D(padding=(1, 1)))
  model.add(Conv2D(384, input_dim = 256, kernel_size = 5, strides = 1, padding = 'same', activation = 'relu'))
  model.add(MaxPooling2D(pool_size = 2, strides = 2))
  model.add(ZeroPadding2D(padding=(1, 1)))
  model.add(Conv2D(384, input_dim = 384, kernel_size = 3, strides = 1, padding = 'same', activation = 'relu'))
  model.add(ZeroPadding2D(padding=(1, 1)))
  model.add(Conv2D(384, input_dim = 384, kernel_size = 3, strides = 1, padding = 'same', activation = 'relu'))
  model.add(MaxPooling2D(pool_size = 2, strides = 2))
  model.add(ZeroPadding2D(padding=(1, 1)))
  model.add(Conv2D(512, input_dim = 384, kernel_size = 3, strides = 1, padding = 'same', activation = 'relu'))
  model.add(ZeroPadding2D(padding=(1, 1)))
  model.add(Conv2D(512, input_dim = 512, kernel_size = 3, strides = 1, padding = 'same', activation = 'relu'))
  model.add(ZeroPadding2D(padding=(1, 1)))
  model.add(Conv2D(512, input_dim = 512, kernel_size = 3, strides = 1, padding = 'same', activation = 'relu'))
  model.add(MaxPooling2D(pool_size = 2, strides = 2))
  return model

def createFCN():
  model = Sequential()
  model.add(Dense(4096, activation = 'relu', input_shape = (512 * 9 * 9,)))
  model.add(Dropout(0.0))
  model.add(Dense(4096, activation = 'relu', input_shape = (4096,)))
  model.add(Dropout(0.0))
  model.add(Dense(512, activation = 'tanh', input_shape = (4096,)))
  return model

class Img2MolModel():
  def __init__(self):
    self.learning_rate = LR
    self.features = createCNN()
    self.classifier = createFCN()
  
  def forward(self, x):
    x = self.features(x)
    x = torch.flatten(x)
    x = self.classifier(x)
    return x

model = Img2MolModel()

